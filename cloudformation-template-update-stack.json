{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "TokenLambdaFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rowantree-auth-api-sandbox-TokenLambdaFunction"
      }
    },
    "RegisterLambdaFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rowantree-auth-api-sandbox-RegisterLambdaFunction"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "rowantree-auth-api",
                  "sandbox",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rowantree-auth-api-sandbox*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rowantree-auth-api-sandbox*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "rowantree-auth-api",
              "sandbox",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "TokenLambdaFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rowantree-auth-api/sandbox/1663704152003-2022-09-20T20:02:32.003Z/TokenLambdaFunction.zip"
        },
        "Handler": "src.handlers.token_handler.handler",
        "Runtime": "python3.9",
        "FunctionName": "rowantree-auth-api-sandbox-TokenLambdaFunction",
        "MemorySize": 512,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCESS_TOKEN_SECRET_KEY": "96c292b81cfe788103071259e22d38ed33babaccc53dcbde60c8d82bab01fa60",
            "ACCESS_TOKEN_ALGORITHM": "HS256",
            "ACCESS_TOKEN_EXPIRATION_TIME": "60",
            "ACCESS_TOKEN_ISSUER": "http://localhost:8001",
            "ACCESS_AUTH_ENDPOINT": "http://localhost:8001",
            "DATABASE_SERVER": "sandbox.cl42mo4qxees.us-west-2.rds.amazonaws.com",
            "DATABASE_NAME": "trt.auth.db",
            "DATABASE_USERNAME": "trt_auth_service",
            "DATABASE_PASSWORD": "&i07LEnY3$tR2a2Kodvi9@9l"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0b808f5df0a126a8d"
          ],
          "SubnetIds": [
            "subnet-046cd412566ccddf6",
            "subnet-0c94756c92664d8f5",
            "subnet-00d10f987726a8a3e",
            "subnet-0799b88d1af596ab5"
          ]
        }
      },
      "DependsOn": [
        "TokenLambdaFunctionLogGroup"
      ]
    },
    "RegisterLambdaFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rowantree-auth-api/sandbox/1663704152003-2022-09-20T20:02:32.003Z/RegisterLambdaFunction.zip"
        },
        "Handler": "src.handlers.register_handler.handler",
        "Runtime": "python3.9",
        "FunctionName": "rowantree-auth-api-sandbox-RegisterLambdaFunction",
        "MemorySize": 512,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "ACCESS_TOKEN_SECRET_KEY": "96c292b81cfe788103071259e22d38ed33babaccc53dcbde60c8d82bab01fa60",
            "ACCESS_TOKEN_ALGORITHM": "HS256",
            "ACCESS_TOKEN_EXPIRATION_TIME": "60",
            "ACCESS_TOKEN_ISSUER": "http://localhost:8001",
            "ACCESS_AUTH_ENDPOINT": "http://localhost:8001",
            "DATABASE_SERVER": "sandbox.cl42mo4qxees.us-west-2.rds.amazonaws.com",
            "DATABASE_NAME": "trt.auth.db",
            "DATABASE_USERNAME": "trt_auth_service",
            "DATABASE_PASSWORD": "&i07LEnY3$tR2a2Kodvi9@9l"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0b808f5df0a126a8d"
          ],
          "SubnetIds": [
            "subnet-046cd412566ccddf6",
            "subnet-0c94756c92664d8f5",
            "subnet-00d10f987726a8a3e",
            "subnet-0799b88d1af596ab5"
          ]
        }
      },
      "DependsOn": [
        "RegisterLambdaFunctionLogGroup"
      ]
    },
    "RegisterLambdaFunctionLambdaVersionAsvIxdtkDl3r8lhl2HAGp1eRmM2y7J0vihj6kqJX3I8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterLambdaFunctionLambdaFunction"
        },
        "CodeSha256": "IsP71UBItOrdHDSSz7ro0Mb62SBvqMR8PdaT404aqYg="
      }
    },
    "RegisterLambdaFunctionLambdaFunctionUrl": {
      "Type": "AWS::Lambda::Url",
      "Properties": {
        "AuthType": "NONE",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "RegisterLambdaFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Cors": {
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "*"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "RegisterLambdaFunctionLambdaPermissionFnUrl": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterLambdaFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunctionUrl",
        "Principal": "*",
        "FunctionUrlAuthType": "NONE"
      }
    },
    "TokenLambdaFunctionLambdaVersionfUAxtQWk8k1m5nWbOUQJ0uDYZSIxYmRKIDhObWsLbE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TokenLambdaFunctionLambdaFunction"
        },
        "CodeSha256": "IsP71UBItOrdHDSSz7ro0Mb62SBvqMR8PdaT404aqYg="
      }
    },
    "TokenLambdaFunctionLambdaFunctionUrl": {
      "Type": "AWS::Lambda::Url",
      "Properties": {
        "AuthType": "NONE",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "TokenLambdaFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Cors": {
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "*"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "TokenLambdaFunctionLambdaPermissionFnUrl": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TokenLambdaFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunctionUrl",
        "Principal": "*",
        "FunctionUrlAuthType": "NONE"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "sandbox-rowantree-auth-api",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceV1": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "v1",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceV1Auth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceV1"
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceV1AuthToken": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceV1Auth"
        },
        "PathPart": "token",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceV1AuthRegister": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceV1Auth"
        },
        "PathPart": "register",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodV1AuthTokenPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceV1AuthToken"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TokenLambdaFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TokenLambdaFunctionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodV1AuthRegisterPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceV1AuthRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RegisterLambdaFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RegisterLambdaFunctionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1663704130593": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "sandbox"
      },
      "DependsOn": [
        "ApiGatewayMethodV1AuthTokenPost",
        "ApiGatewayMethodV1AuthRegisterPost"
      ]
    },
    "TokenLambdaFunctionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TokenLambdaFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RegisterLambdaFunctionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterLambdaFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-rowantree-auth-api-sandbox-ServerlessDeploymentBucketName"
      }
    },
    "RegisterLambdaFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterLambdaFunctionLambdaVersionAsvIxdtkDl3r8lhl2HAGp1eRmM2y7J0vihj6kqJX3I8"
      },
      "Export": {
        "Name": "sls-rowantree-auth-api-sandbox-RegisterLambdaFunctionLambdaFunctionQualifiedArn"
      }
    },
    "RegisterLambdaFunctionLambdaFunctionUrl": {
      "Description": "Lambda Function URL",
      "Value": {
        "Fn::GetAtt": [
          "RegisterLambdaFunctionLambdaFunctionUrl",
          "FunctionUrl"
        ]
      },
      "Export": {
        "Name": "sls-rowantree-auth-api-sandbox-RegisterLambdaFunctionLambdaFunctionUrl"
      }
    },
    "TokenLambdaFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TokenLambdaFunctionLambdaVersionfUAxtQWk8k1m5nWbOUQJ0uDYZSIxYmRKIDhObWsLbE"
      },
      "Export": {
        "Name": "sls-rowantree-auth-api-sandbox-TokenLambdaFunctionLambdaFunctionQualifiedArn"
      }
    },
    "TokenLambdaFunctionLambdaFunctionUrl": {
      "Description": "Lambda Function URL",
      "Value": {
        "Fn::GetAtt": [
          "TokenLambdaFunctionLambdaFunctionUrl",
          "FunctionUrl"
        ]
      },
      "Export": {
        "Name": "sls-rowantree-auth-api-sandbox-TokenLambdaFunctionLambdaFunctionUrl"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/sandbox"
          ]
        ]
      },
      "Export": {
        "Name": "sls-rowantree-auth-api-sandbox-ServiceEndpoint"
      }
    }
  }
}